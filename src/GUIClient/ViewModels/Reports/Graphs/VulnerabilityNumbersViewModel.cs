using System.Collections.Generic;
using ClientServices.Interfaces;
using ReactiveUI;
using System.Linq;
using Model.Statistics;

namespace GUIClient.ViewModels.Reports.Graphs;

public class VulnerabilityNumbersViewModel: GraphsViewModelBase
{
    #region LANGUAGES

        private string StrNumbers => Localizer["Numbers"] ;
        private string StrCritical => Localizer["Critical"]+ ": ";
        private string StrHigh => Localizer["High"]+ ": ";
        private string StrMedium => Localizer["Medium"]+ ": ";
        private string StrLow => Localizer["Low"]+ ": ";
        
        private string StrOpen => Localizer["Open"];
        private string StrClosed => Localizer["Closed"];
        

    #endregion
    
    #region PROPERTIES

    private string _critical = "0";

    public string Critical
    {
        get => _critical;
        set => this.RaiseAndSetIfChanged(ref _critical, value);
    }
    
    private string _high = "0";
    public string High
    {
        get => _high;
        set => this.RaiseAndSetIfChanged(ref _high, value);
    }
    
    private string _medium= "0";
    public string Medium
    {
        get => _medium;
        set => this.RaiseAndSetIfChanged(ref _medium, value);
    }
    private string _low = "0";
    public string Low
    {
        get => _low;
        set => this.RaiseAndSetIfChanged(ref _low, value);
    }
    
    
    private string _closedCritical = "0";

    public string ClosedCritical
    {
        get => _closedCritical;
        set => this.RaiseAndSetIfChanged(ref _closedCritical, value);
    }
    
    private string _closedHigh = "0";
    public string ClosedHigh
    {
        get => _closedHigh;
        set => this.RaiseAndSetIfChanged(ref _closedHigh, value);
    }
    
    private string _closedMedium = "0";
    public string ClosedMedium
    {
        get => _closedMedium;
        set => this.RaiseAndSetIfChanged(ref _closedMedium, value);
    }
    private string _closedLow = "0";
    public string ClosedLow
    {
        get => _closedLow;
        set => this.RaiseAndSetIfChanged(ref _closedLow, value);
    }
    
    
    #endregion
    
    #region SERVICES
    private IStatisticsService StatisticsService { get; } = GetService<IStatisticsService>();
    #endregion

    #region CONSTRUCTOR
    
    public VulnerabilityNumbersViewModel()
    {
        AuthenticationService.AuthenticationSucceeded += (_, _) =>
        {
            LoadData();
        };
    }

    #endregion
    
    #region METHODS

    private async void LoadData()
    {
        //var numbers = StatisticsService.GetVulnerabilityNumbers();
        
        var closedStatus = new List<int> {4, 8, 26, 27, 31, 25, 37, 11};
        
        var numbersByStatus = await StatisticsService.GetVulnerabilitiesNumbersByStatusAsync();

        var open = numbersByStatus.NumbersByStatus.Where(k => !closedStatus.Contains(k.Key));
        var closed = numbersByStatus.NumbersByStatus.Where(k => closedStatus.Contains(k.Key));

        VulnerabilityNumbers numbers = new();
        if (open.Any()) 
            numbers = open.Select(d => d.Value).Aggregate((a, b) => a + b);
        
        Critical = numbers.Critical.ToString();
        High = numbers.High.ToString();
        Medium = numbers.Medium.ToString();
        Low = numbers.Low.ToString();
        
        
        VulnerabilityNumbers closedNumbers = new();
        if (closed.Any()) 
            closedNumbers = closed.Select(d => d.Value).Aggregate((a, b) => a + b);
        
        ClosedCritical = closedNumbers.Critical.ToString();
        ClosedHigh = closedNumbers.High.ToString();
        ClosedMedium = closedNumbers.Medium.ToString();
        ClosedLow = closedNumbers.Low.ToString();
        
        
    }
    
    #endregion

}