using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using ClientServices.Interfaces;
using DynamicData;
using LiveChartsCore;
using LiveChartsCore.Defaults;
using LiveChartsCore.SkiaSharpView;
using LiveChartsCore.SkiaSharpView.Painting;
using Microsoft.AspNetCore.Authentication;
using Model.Statistics;
using ReactiveUI;
using SkiaSharp;

namespace GUIClient.ViewModels.Reports.Graphs;

public class VulnerabilityImportsViewModel: GraphsViewModelBase
{
    #region LANGUAGES
    private string StrImports => Localizer["Imports"];
    #endregion
    
    #region PROPERTIES
    private List<ImportSeverity> _severities = new List<ImportSeverity>();

    public List<ImportSeverity> Severities
    {
        get => _severities;
        set => this.RaiseAndSetIfChanged(ref _severities, value);
    }
    
    private ObservableCollection<ISeries> _series = new();

    public ObservableCollection<ISeries> Series
    {
        get => _series;
        set => this.RaiseAndSetIfChanged(ref _series, value);
    }
    
    public Axis[] XAxes { get; set; } =
    {
        new Axis
        {
            Labels = new string[] { "1", "2", "3", "4" },
            LabelsRotation = 0,
            SeparatorsPaint = new SolidColorPaint(new SKColor(200, 200, 200)),
            SeparatorsAtCenter = false,
            TicksPaint = new SolidColorPaint(new SKColor(35, 35, 35)),
            TicksAtCenter = true
        }
    };
    
    #endregion
    
    #region SERVICES
    
    private IStatisticsService StatisticsService { get; } = GetService<IStatisticsService>();
    
    #endregion
    
    #region CONSTRUCTOR
    
    public VulnerabilityImportsViewModel()
    {
        AuthenticationService.AuthenticationSucceeded += (_, _) =>
        {
            LoadData();
        };
    }
    #endregion
    
    #region METHODS
    private async void LoadData()
    {
        var data = await StatisticsService.GetVulnerabilitiesServerityByImportAsync();
        
        var maxItemCounts = data.Max(x => x.ItemCount);
        var minItemCounts = data.Min(x => x.ItemCount);
        var range = maxItemCounts - minItemCounts;
        
        var series = new ObservableCollection<ISeries>();

        var sortedData = data.OrderBy(d => d.ImportDate).ThenBy(d=>d.CriticalityLevel).ToList();

        var refDate = DateTime.MinValue;
        
        for (var i = 0; i < sortedData.Count; i++)
        {
            var item = sortedData[i];

            if (item.ImportDate.Date != refDate.Date)
            {
                refDate = item.ImportDate;
                var boxSerie = new BoxSeries<BoxValue>
                {
                    Name = item.ImportDate.ToString("dd/MM/yyyy"),
                    Values = GetBoxValuesFromDate(sortedData, item.ImportDate)
                };
                series.Add(boxSerie);
            }

        }
        
        Series = series;
        
    }

    public BoxValue[] GetBoxValuesFromDate(List<ImportSeverity> data, DateTime date)
    {
        var items = data.Where(x => x.ImportDate.Date == date.Date).ToList();
        
        var boxValues = new List<BoxValue>();
        
        for(var i = 1; i <= 4; i++)
        {
            var item = items.FirstOrDefault(x => x.CriticalityLevel.Equals(i));
            if (item != null)
            {
                boxValues.Add(new BoxValue(Math.Round(item.TotalRiskValue, 2), 
                    Math.Round(item.TotalRiskValue,2),
                    Math.Round(item.TotalRiskValue - item.ItemCount / 2, 2), 
                    Math.Round(item.TotalRiskValue - item.ItemCount / 2, 2),
                    Math.Round(item.TotalRiskValue,2)));
            }
            else
            {
                boxValues.Add(new BoxValue(0, 0, 0, 0, 0));
            }
        }
        
        return boxValues.ToArray();
    }
    #endregion
}