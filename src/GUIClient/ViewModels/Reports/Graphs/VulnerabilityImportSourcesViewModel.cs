using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using ClientServices.Interfaces;
using DynamicData;
using LiveChartsCore;
using LiveChartsCore.Measure;
using LiveChartsCore.SkiaSharpView;
using LiveChartsCore.SkiaSharpView.Extensions;
using LiveChartsCore.SkiaSharpView.Painting;
using Model.Statistics;
using ReactiveUI;
using SkiaSharp;

namespace GUIClient.ViewModels.Reports.Graphs;

public class VulnerabilityImportSourcesViewModel: GraphsViewModelBase
{
    #region LANGUAGES

    public string StrImportsources => Localizer["Importsources"];

    #endregion
    
    #region PROPERTIES
    
    private ObservableCollection<ISeries> _series = new();
    public ObservableCollection<ISeries> Series {
        get => _series;
        set => this.RaiseAndSetIfChanged(ref _series, value);
    }
    
    #endregion

    #region SERVICES

    private IStatisticsService StatisticsService { get; } = GetService<IStatisticsService>();

    #endregion

    #region CONSTRUCTOR

    public VulnerabilityImportSourcesViewModel()
    {
        AuthenticationService.AuthenticationSucceeded += (_, _) =>
        {
            LoadData();
        };
    }

    #endregion

    #region METHODS

    private void LoadData()
    {
        var sources = StatisticsService.GetVulnerabilityImportSources();

        var result = new List<PieSeries<int>>();

        foreach (var source in sources)   
        {
            result.Add( new PieSeries<int>
            {
                Values = new[]{ Convert.ToInt32(source.Value) },
                ToolTipLabelFormatter = point => $"{source.Name}",
                //DataLabelsPaint = new SolidColorPaint(new SKColor(5, 5, 5)),
                
            } );
        }
        
        Series = new ObservableCollection<ISeries>(result);
        
    }

    #endregion
}