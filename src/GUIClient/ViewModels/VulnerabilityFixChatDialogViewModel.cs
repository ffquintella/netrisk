using System;
using System.Collections.ObjectModel;
using System.Threading;
using System.Threading.Tasks;
using ClientServices.Interfaces;
using DAL.Entities;
using GUIClient.ViewModels.Dialogs;
using GUIClient.ViewModels.Dialogs.Parameters;
using GUIClient.ViewModels.Dialogs.Results;
using ReactiveUI;

namespace GUIClient.ViewModels;

public class VulnerabilityFixChatDialogViewModel : ParameterizedDialogViewModelBaseAsync<
    VulnerabilityFixChatDialogResult, VulnerabilityFixChatDialogParameter>
{

    #region LANGUAGE

    public string StrVulnerability { get; } = Localizer["Vulnerability"];
    public string StrMessages { get; } = Localizer["Messages"];
    public string StrName { get; } = Localizer["Name"];
    public string StrCreationDate { get; } = Localizer["CreationDate"];
    public string StrComment { get; } = Localizer["Comment"];
    public string StrNewComment { get; } = Localizer["NewComment"];
    public string StrCancel { get; } = Localizer["Cancel"];
    public string StrClose { get; } = Localizer["Close"];
    public string StrSend { get; } = Localizer["Send"];
    #endregion

    #region FIELDS

    #endregion

    #region PROPERTIES

    private int FixRequestId
    {
        get;
        set;
    } = 0;

    private ObservableCollection<Comment> _comments = new();

    public ObservableCollection<Comment> Comments
    {
        get => _comments;
        set => this.RaiseAndSetIfChanged(ref _comments, value);
    }

    private Vulnerability _vulnerability = new();

    public Vulnerability Vulnerability
    {
        get => _vulnerability;
        set => this.RaiseAndSetIfChanged(ref _vulnerability, value);
    }
    
    private string _newComment = string.Empty;
    public string NewComment
    {
        get => _newComment;
        set => this.RaiseAndSetIfChanged(ref _newComment, value);
    }

    #endregion

    #region SERVICES

    private IVulnerabilitiesService VulnerabilitiesService { get; } = GetService<IVulnerabilitiesService>();
    private ICommentsService CommentsService { get; } = GetService<ICommentsService>();
    private new IAuthenticationService AuthenticationService { get; } = GetService<IAuthenticationService>();

    #endregion


    #region METHODS

    public async override Task ActivateAsync(VulnerabilityFixChatDialogParameter parameter,
        CancellationToken cancellationToken = default)
    {
        
        FixRequestId = parameter.FixRequestId;

        Vulnerability = await VulnerabilitiesService.GetOneAsync(parameter.VulnerabilityId);


        Comments = new ObservableCollection<Comment>(
            await CommentsService.GetFixRequestCommentsAsync(parameter.FixRequestId));


    }

    public void BtCancelClicked()
    {
        Close(new VulnerabilityFixChatDialogResult()
        {
            Action = ResultActions.Cancel
        });
    }
    
    public void BtCloseClicked()
    {
        Close(new VulnerabilityFixChatDialogResult()
        {
            Action = ResultActions.Cancel
        });
    }
    
    public async void BtSendClicked()
    {

        var user = AuthenticationService.AuthenticatedUserInfo;

        var newComment = new Comment()
        {
            FixRequestId = FixRequestId,
            Text = NewComment,
            Date = DateTime.Now,
            UserId = user!.UserId,
            ReplyTo = user!.UserId,
            CommenterName = user!.UserName,
            Type = "FixRequest",
            VulnerabilityId = Vulnerability.Id,
            IsAnonymous = 0
        };

        var comment = await CommentsService.CreateCommentAsync(newComment);
        
        Comments.Add(comment);
    }

#endregion
}