using System.Collections.ObjectModel;
using System.Threading;
using System.Threading.Tasks;
using ClientServices.Interfaces;
using DAL.Entities;
using GUIClient.ViewModels.Dialogs;
using GUIClient.ViewModels.Dialogs.Parameters;
using GUIClient.ViewModels.Dialogs.Results;
using ReactiveUI;

namespace GUIClient.ViewModels;

public class VulnerabilityFixChatDialogViewModel: ParameterizedDialogViewModelBaseAsync<VulnerabilityFixChatDialogResult, VulnerabilityFixChatDialogParameter>
{
    
    #region LANGUAGE
        public string StrVulnerability { get;  } = Localizer["Vulnerability"];
        public string StrMessages { get;  } = Localizer["Messages"];
        public string StrName { get;  } = Localizer["Name"];
        public string StrCreationDate { get;  } = Localizer["CreationDate"];
    #endregion
    
    #region FIELDS
    #endregion

    #region PROPERTIES

    private ObservableCollection<Comment> _comments = new ();
    
    public ObservableCollection<Comment> Comments
    {
        get => _comments;
        set => this.RaiseAndSetIfChanged(ref _comments, value);
    }
    
    private Vulnerability _vulnerability = new();
    public Vulnerability Vulnerability
    {
        get => _vulnerability;
        set => this.RaiseAndSetIfChanged(ref _vulnerability, value);
    }
    
    #endregion
    
    #region SERVICES
    private IVulnerabilitiesService VulnerabilitiesService { get; } = GetService<IVulnerabilitiesService>();
    private ICommentsService CommentsService { get; } = GetService<ICommentsService>();
    #endregion
    
    
    #region METHODS
    public async override Task ActivateAsync(VulnerabilityFixChatDialogParameter parameter, CancellationToken cancellationToken = default)
    {

        Vulnerability = await VulnerabilitiesService.GetOneAsync(parameter.VulnerabilityId);
        
        
        Comments = new ObservableCollection<Comment>(
            await CommentsService.GetFixRequestCommentsAsync(parameter.FixRequestId));
        
        return;
    }
    
    #endregion
}