using ReactiveUI;
using System;
using System.Collections.Generic;
using System.IO;
using System.Reactive;
using Avalonia.Controls;
using Avalonia.Platform.Storage;
using ClientServices.Interfaces;
using ClientServices.Interfaces.Importers;

namespace GUIClient.ViewModels;

public class VulnerabilityImportViewModel: ViewModelBase
{
    #region LANGUAGE
        public string StrImport { get; } = Localizer["Import"];
        public string StrFile { get; } = Localizer["File"];
        public string StrFileType { get; } = Localizer["FileType"];
        public string StrSave { get; } = Localizer["Save"];
        public string StrCancel { get; } = Localizer["Cancel"];
    #endregion

    #region SERVICES

    private IVulnerabilityImporterService VulnerabilityImporterService { get; } =
        GetService<IVulnerabilityImporterService>();

    #endregion

    #region PROPERTIES

        private bool _isImporting;
        public bool IsImporting
        {
            get => _isImporting;
            set => this.RaiseAndSetIfChanged(ref _isImporting, value);
        }
        
        private int _importProgress;
        public int ImportProgress
        {
            get => _importProgress;
            set => this.RaiseAndSetIfChanged(ref _importProgress, value);
        }
        
        private string _importFilePath = "";
    
        public string ImportFilePath
        {
            get => _importFilePath;
            set => this.RaiseAndSetIfChanged(ref _importFilePath, value);
        }
        
        private string _selectedImportType = "";
        public string SelectedImportType
        {
            get => _selectedImportType;
            set => this.RaiseAndSetIfChanged(ref _selectedImportType, value);
        }

        public Window? ParentWindow { get; set; }

        public string[] FileTypes { get; } = new string[] {"Tenable Nessus", "Secure ScoreCard"};

        #endregion

    #region BUTTONS

    public ReactiveCommand<Unit, Unit> BtSelectFileClicked { get; } 
    public ReactiveCommand<Unit, Unit> BtImportClicked { get; } 
    public ReactiveCommand<Unit, Unit> BtCancelClicked { get; } 

    #endregion

    public VulnerabilityImportViewModel()
    {
        BtSelectFileClicked = ReactiveCommand.Create(ExecuteSelectFile);
        BtImportClicked = ReactiveCommand.Create(ExecuteImport);
        BtCancelClicked = ReactiveCommand.Create(ExecuteCancel);
    }
    
    #region METHODS

    private async void ExecuteSelectFile()
    {
        var topLevel = TopLevel.GetTopLevel(ParentWindow);
        
        var file = await topLevel!.StorageProvider.OpenFilePickerAsync(new FilePickerOpenOptions()
        {
            Title = "File",
        });

        if (file.Count == 0) return;
        
        var absolutPath = file[0].Path.AbsolutePath;
        
        ImportFilePath = file[0].Path.LocalPath;
        
        
        var extension = "";
        if (Path.HasExtension(absolutPath)) extension = Path.GetExtension(absolutPath);
        
        if(extension == ".nessus")
            SelectedImportType = "Tenable Nessus";
        else
            SelectedImportType = "";

        
    }
    
    private async void ExecuteImport()
    {
        var importer = VulnerabilityImporterService.GetImporter(SelectedImportType);
        
        IsImporting = true;
        importer.StepCompleted += (sender, args) =>
        {
            ImportProgress = args.Progess;
        };
        
        var importedCount = await importer.Import(ImportFilePath);
        
        IsImporting = false;
    }
    
    private void ExecuteCancel()
    {
        
    }
    
    #endregion
}