// <auto-generated />
using System;
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(NRDbContext))]
    [Migration("20241105195812_RiskToRiskCatalog")]
    partial class RiskToRiskCatalog
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.ApiKey", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(6) unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<string>("ClientIp")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("client_ip");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("current_timestamp()");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime>("CreationDate"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("status");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ClientIp" }, "idx_api_keys_ip");

                    b.HasIndex(new[] { "Value" }, "idx_api_keys_value")
                        .IsUnique();

                    b.ToTable("api_keys", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.Assessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("assessments", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.AssessmentAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("answer");

                    b.Property<int>("AssessmentId")
                        .HasColumnType("int(11)")
                        .HasColumnName("assessment_id");

                    b.Property<int>("AssessmentScoringId")
                        .HasColumnType("int(11)")
                        .HasColumnName("assessment_scoring_id");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("order")
                        .HasDefaultValueSql("'999999'");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("question_id");

                    b.Property<int?>("RiskOwner")
                        .HasColumnType("int(11)")
                        .HasColumnName("risk_owner");

                    b.Property<float>("RiskScore")
                        .HasColumnType("float")
                        .HasColumnName("risk_score");

                    b.Property<byte[]>("RiskSubject")
                        .IsRequired()
                        .HasColumnType("blob")
                        .HasColumnName("risk_subject");

                    b.Property<bool>("SubmitRisk")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("submit_risk");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AssessmentId" }, "fk_assessment_answer");

                    b.HasIndex(new[] { "QuestionId" }, "fk_question_answer");

                    b.ToTable("assessment_answers", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.AssessmentQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssessmentId")
                        .HasColumnType("int(11)")
                        .HasColumnName("assessment_id");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("order")
                        .HasDefaultValueSql("'999999'");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("question");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AssessmentId" }, "fk_assessment_question");

                    b.ToTable("assessment_questions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.AssessmentRun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnalystId")
                        .HasColumnType("int(11)");

                    b.Property<int>("AssessmentId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<int>("EntityId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("HostId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("RunDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AnalystId" }, "fkAnalystId");

                    b.HasIndex(new[] { "AssessmentId" }, "fkAssessment");

                    b.HasIndex(new[] { "EntityId" }, "fkEntity");

                    b.HasIndex(new[] { "HostId" }, "fkHost");

                    b.HasIndex(new[] { "Status" }, "idxStatus");

                    b.ToTable("assessment_runs", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.AssessmentRunsAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnswerId")
                        .HasColumnType("int(11)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int(11)");

                    b.Property<int>("RunId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AnswerId" }, "fkAnswerId");

                    b.HasIndex(new[] { "QuestionId" }, "fkQuestionId");

                    b.HasIndex(new[] { "RunId" }, "fkRunId");

                    b.ToTable("assessment_runs_answers", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AffectedColumns")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("NewValues")
                        .HasColumnType("longtext")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<string>("OldValues")
                        .HasColumnType("longtext")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AffectedColumns" }, "idx_audit_cols")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 768 });

                    b.HasIndex(new[] { "DateTime" }, "idx_audit_date");

                    b.HasIndex(new[] { "NewValues" }, "idx_audit_newVal")
                        .HasAnnotation("MySql:FullTextIndex", true);

                    b.HasIndex(new[] { "OldValues" }, "idx_audit_oldValues")
                        .HasAnnotation("MySql:FullTextIndex", true);

                    b.HasIndex(new[] { "PrimaryKey" }, "idx_audit_pk");

                    b.HasIndex(new[] { "TableName" }, "idx_audit_table");

                    b.HasIndex(new[] { "Type" }, "idx_audit_type");

                    b.HasIndex(new[] { "UserId" }, "idx_audit_userid");

                    b.ToTable("audit", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("category", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.ClientRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Hostname")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("LastVerificationDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime>("LastVerificationDate"));

                    b.Property<string>("LoggedAccount")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime>("RegistrationDate"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'requested'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ExternalId" }, "ExternalId");

                    b.ToTable("client_registration", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.CloseReason", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("close_reason", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.Closure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CloseReason")
                        .HasColumnType("int(11)")
                        .HasColumnName("close_reason");

                    b.Property<DateTime>("ClosureDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("closure_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int>("RiskId")
                        .HasColumnType("int(11)")
                        .HasColumnName("risk_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CloseReason" }, "closures_close_reason_idx");

                    b.HasIndex(new[] { "UserId" }, "closures_user_id_idx");

                    b.ToTable("closures", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CommenterName")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int?>("FixRequestId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("HostId")
                        .HasColumnType("int(11)");

                    b.Property<sbyte>("IsAnonymous")
                        .HasColumnType("tinyint(4)");

                    b.Property<int?>("ReplyTo")
                        .HasColumnType("int(11)");

                    b.Property<int?>("RiskId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("VulnerabilityId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FixRequestId" }, "fk_fix_request_comments");

                    b.HasIndex(new[] { "HostId" }, "fk_host_id_comments");

                    b.HasIndex(new[] { "RiskId" }, "fk_risk_id_comments");

                    b.HasIndex(new[] { "UserId" }, "fk_user_id_comments");

                    b.HasIndex(new[] { "VulnerabilityId" }, "fk_vulnerability_id_comments");

                    b.HasIndex(new[] { "CommenterName" }, "idx-commenterName");

                    b.HasIndex(new[] { "Text" }, "idx-full-text")
                        .HasAnnotation("MySql:FullTextIndex", true);

                    b.HasIndex(new[] { "Type" }, "idx-type-comments");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.ContributingRisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("subject");

                    b.Property<float>("Weight")
                        .HasColumnType("float")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("contributing_risks", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.ContributingRisksImpact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContributingRisksId")
                        .HasColumnType("int(11)")
                        .HasColumnName("contributing_risks_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("Value")
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ContributingRisksId" }, "contributing_risks_id");

                    b.HasIndex(new[] { "ContributingRisksId", "Value" }, "cri_index");

                    b.HasIndex(new[] { "Value" }, "cri_value_idx");

                    b.ToTable("contributing_risks_impact", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.ContributingRisksLikelihood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("Value")
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Value" }, "crl_index");

                    b.ToTable("contributing_risks_likelihood", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.ControlClass", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("control_class", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.ControlMaturity", b =>
                {
                    b.Property<int>("Value")
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("control_maturity", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.ControlPhase", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("control_phase", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.ControlPriority", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("control_priority", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.ControlType", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("control_type", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.CustomRiskModelValue", b =>
                {
                    b.Property<int>("Impact")
                        .HasColumnType("int(11)")
                        .HasColumnName("impact");

                    b.Property<int>("Likelihood")
                        .HasColumnType("int(11)")
                        .HasColumnName("likelihood");

                    b.Property<double>("Value")
                        .HasColumnType("double(3,1)")
                        .HasColumnName("value");

                    b.HasIndex(new[] { "Impact", "Likelihood" }, "impact_likelihood_unique")
                        .IsUnique();

                    b.ToTable("custom_risk_model_values", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.EntitiesProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Entity")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Entity" }, "fk_entity");

                    b.HasIndex(new[] { "Name" }, "idx_name");

                    b.HasIndex(new[] { "Value" }, "idx_value")
                        .HasAnnotation("MySql:FullTextIndex", true);

                    b.ToTable("entities_properties", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int(11)");

                    b.Property<string>("DefinitionName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DefinitionVersion")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("Parent")
                        .HasColumnType("int(11)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime>("Updated"));

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Parent" }, "fk_parent");

                    b.HasIndex(new[] { "DefinitionName" }, "idx_definition_name");

                    b.ToTable("entities", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.FailedLoginAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<sbyte?>("Expired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("expired")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ip")
                        .HasDefaultValueSql("'0.0.0.0'");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("failed_login_attempts", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.Family", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("family", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.FileType", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name")
                        .IsUnique();

                    b.ToTable("file_types", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.FileTypeExtension", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name")
                        .IsUnique()
                        .HasDatabaseName("name1");

                    b.ToTable("file_type_extensions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.FixRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<DateTime?>("FixDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FixTeamId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("IsTeamFix")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastInteraction")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("LastInteraction"));

                    b.Property<int?>("LastReportingUserId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("RequestingUserId")
                        .HasColumnType("int(11)");

                    b.Property<string>("SingleFixDestination")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime");

                    b.Property<int>("VulnerabilityId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FixTeamId" }, "fk_fixteam");

                    b.HasIndex(new[] { "LastReportingUserId" }, "fk_lastReportingUser");

                    b.HasIndex(new[] { "RequestingUserId" }, "fk_requesting_user_id");

                    b.HasIndex(new[] { "VulnerabilityId" }, "fk_vulnerability");

                    b.HasIndex(new[] { "Identifier" }, "idx_identifier")
                        .IsUnique();

                    b.ToTable("FixRequest", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Framework", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<byte[]>("Description")
                        .IsRequired()
                        .HasColumnType("blob")
                        .HasColumnName("description");

                    b.Property<int?>("DesiredFrequency")
                        .HasColumnType("int(11)")
                        .HasColumnName("desired_frequency");

                    b.Property<DateOnly?>("LastAuditDate")
                        .HasColumnType("date")
                        .HasColumnName("last_audit_date");

                    b.Property<byte[]>("Name")
                        .IsRequired()
                        .HasColumnType("blob")
                        .HasColumnName("name");

                    b.Property<DateOnly?>("NextAuditDate")
                        .HasColumnType("date")
                        .HasColumnName("next_audit_date");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)")
                        .HasColumnName("order");

                    b.Property<int>("Parent")
                        .HasColumnType("int(11)")
                        .HasColumnName("parent");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("frameworks", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.FrameworkControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ControlClass")
                        .HasColumnType("int(11)")
                        .HasColumnName("control_class");

                    b.Property<int>("ControlMaturity")
                        .HasColumnType("int(11)")
                        .HasColumnName("control_maturity");

                    b.Property<string>("ControlNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("control_number");

                    b.Property<int?>("ControlOwner")
                        .HasColumnType("int(11)")
                        .HasColumnName("control_owner");

                    b.Property<int?>("ControlPhase")
                        .HasColumnType("int(11)")
                        .HasColumnName("control_phase");

                    b.Property<int?>("ControlPriority")
                        .HasColumnType("int(11)")
                        .HasColumnName("control_priority");

                    b.Property<bool?>("ControlStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("control_status")
                        .HasDefaultValueSql("'1'");

                    b.Property<sbyte>("Deleted")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("deleted");

                    b.Property<byte[]>("Description")
                        .HasColumnType("blob")
                        .HasColumnName("description");

                    b.Property<int?>("DesiredFrequency")
                        .HasColumnType("int(11)")
                        .HasColumnName("desired_frequency");

                    b.Property<int>("DesiredMaturity")
                        .HasColumnType("int(11)")
                        .HasColumnName("desired_maturity");

                    b.Property<int?>("Family")
                        .HasColumnType("int(11)")
                        .HasColumnName("family");

                    b.Property<DateOnly?>("LastAuditDate")
                        .HasColumnType("date")
                        .HasColumnName("last_audit_date");

                    b.Property<byte[]>("LongName")
                        .HasColumnType("blob")
                        .HasColumnName("long_name");

                    b.Property<int>("MitigationPercent")
                        .HasColumnType("int(11)")
                        .HasColumnName("mitigation_percent");

                    b.Property<DateOnly?>("NextAuditDate")
                        .HasColumnType("date")
                        .HasColumnName("next_audit_date");

                    b.Property<string>("ShortName")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("short_name");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'1'");

                    b.Property<DateTime>("SubmissionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("submission_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<byte[]>("SupplementalGuidance")
                        .HasColumnType("blob")
                        .HasColumnName("supplemental_guidance");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Deleted" }, "framework_controls_deleted_idx");

                    b.ToTable("framework_controls", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.FrameworkControlMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ControlId")
                        .HasColumnType("int(11)")
                        .HasColumnName("control_id");

                    b.Property<int>("Framework")
                        .HasColumnType("int(11)")
                        .HasColumnName("framework");

                    b.Property<string>("ReferenceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("reference_name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ControlId" }, "control_id");

                    b.HasIndex(new[] { "Framework" }, "framework");

                    b.ToTable("framework_control_mappings", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.FrameworkControlTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalStakeholders")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("additional_stakeholders");

                    b.Property<int>("ApproximateTime")
                        .HasColumnType("int(11)")
                        .HasColumnName("approximate_time");

                    b.Property<DateOnly?>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<int?>("DesiredFrequency")
                        .HasColumnType("int(11)")
                        .HasColumnName("desired_frequency");

                    b.Property<string>("ExpectedResults")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("expected_results");

                    b.Property<int>("FrameworkControlId")
                        .HasColumnType("int(11)")
                        .HasColumnName("framework_control_id");

                    b.Property<DateOnly>("LastDate")
                        .HasColumnType("date")
                        .HasColumnName("last_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("name");

                    b.Property<DateOnly>("NextDate")
                        .HasColumnType("date")
                        .HasColumnName("next_date");

                    b.Property<string>("Objective")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("objective");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("TestFrequency")
                        .HasColumnType("int(11)")
                        .HasColumnName("test_frequency");

                    b.Property<string>("TestSteps")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("test_steps");

                    b.Property<int>("Tester")
                        .HasColumnType("int(11)")
                        .HasColumnName("tester");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Id" }, "id")
                        .IsUnique();

                    b.ToTable("framework_control_tests", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.FrameworkControlTestAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApproximateTime")
                        .HasColumnType("int(11)")
                        .HasColumnName("approximate_time");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("DesiredFrequency")
                        .HasColumnType("int(11)")
                        .HasColumnName("desired_frequency");

                    b.Property<string>("ExpectedResults")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("expected_results");

                    b.Property<int>("FrameworkControlId")
                        .HasColumnType("int(11)")
                        .HasColumnName("framework_control_id");

                    b.Property<DateOnly>("LastDate")
                        .HasColumnType("date")
                        .HasColumnName("last_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("name");

                    b.Property<DateOnly>("NextDate")
                        .HasColumnType("date")
                        .HasColumnName("next_date");

                    b.Property<string>("Objective")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("objective");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("TestFrequency")
                        .HasColumnType("int(11)")
                        .HasColumnName("test_frequency");

                    b.Property<int>("TestId")
                        .HasColumnType("int(11)")
                        .HasColumnName("test_id");

                    b.Property<string>("TestSteps")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("test_steps");

                    b.Property<int>("Tester")
                        .HasColumnType("int(11)")
                        .HasColumnName("tester");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("framework_control_test_audits", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.FrameworkControlTestComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("comment");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int>("TestAuditId")
                        .HasColumnType("int(11)")
                        .HasColumnName("test_audit_id");

                    b.Property<int>("User")
                        .HasColumnType("int(11)")
                        .HasColumnName("user");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("framework_control_test_comments", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.FrameworkControlTestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("last_updated")
                        .HasDefaultValueSql("current_timestamp()");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime>("LastUpdated"));

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("submission_date");

                    b.Property<int>("SubmittedBy")
                        .HasColumnType("int(11)")
                        .HasColumnName("submitted_by");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.Property<int>("TestAuditId")
                        .HasColumnType("int(11)")
                        .HasColumnName("test_audit_id");

                    b.Property<DateOnly>("TestDate")
                        .HasColumnType("date")
                        .HasColumnName("test_date");

                    b.Property<string>("TestResult")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("test_result");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("framework_control_test_results", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.FrameworkControlTestResultsToRisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("RiskId")
                        .HasColumnType("int(11)")
                        .HasColumnName("risk_id");

                    b.Property<int?>("TestResultsId")
                        .HasColumnType("int(11)")
                        .HasColumnName("test_results_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("framework_control_test_results_to_risks", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.FrameworkControlToFramework", b =>
                {
                    b.Property<int>("ControlId")
                        .HasColumnType("int(11)")
                        .HasColumnName("control_id");

                    b.Property<int>("FrameworkId")
                        .HasColumnType("int(11)")
                        .HasColumnName("framework_id");

                    b.HasKey("ControlId", "FrameworkId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "FrameworkId", "ControlId" }, "framework_id");

                    b.ToTable("framework_control_to_framework", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.FrameworkControlTypeMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ControlId")
                        .HasColumnType("int(11)")
                        .HasColumnName("control_id");

                    b.Property<int>("ControlTypeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("control_type_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("framework_control_type_mappings", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.Host", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Fqdn")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FQDN");

                    b.Property<string>("HostName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Ip")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("LastVerificationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MacAddress")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Os")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("OS");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Source")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'manual'");

                    b.Property<short>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TeamId" }, "fk_host_team");

                    b.ToTable("hosts", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DAL.Entities.HostsService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HostId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Port")
                        .HasColumnType("int(11)");

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "HostId" }, "fk_host");

                    b.HasIndex(new[] { "Name" }, "idx_name")
                        .HasDatabaseName("idx_name1");

                    b.HasIndex(new[] { "Port" }, "idx_port");

                    b.HasIndex(new[] { "Protocol" }, "idx_protocol");

                    b.ToTable("hosts_services", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Impact", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("Value")
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    b.HasIndex(new[] { "Value" }, "impact_index");

                    b.ToTable("impact", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("CancellationToken")
                        .HasColumnType("blob");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int(11)");

                    b.Property<byte[]>("Parameters")
                        .HasColumnType("blob");

                    b.Property<int>("Progress")
                        .HasColumnType("int(11)");

                    b.Property<byte[]>("Result")
                        .HasColumnType("blob");

                    b.Property<DateTime>("StartedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OwnerId" }, "fk_user_job");

                    b.HasIndex(new[] { "StartedAt" }, "idx_started");

                    b.HasIndex(new[] { "Status" }, "idx_status");

                    b.HasIndex(new[] { "LastUpdate" }, "idx_updated");

                    b.ToTable("jobs", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Likelihood", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("Value")
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    b.HasIndex(new[] { "Value" }, "likelihood_index");

                    b.ToTable("likelihood", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<byte[]>("Data")
                        .HasColumnType("blob")
                        .HasColumnName("data");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("expiration_date");

                    b.Property<string>("KeyHash")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("key_hash");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ExpirationDate" }, "expiration_date_idx");

                    b.HasIndex(new[] { "KeyHash", "Type" }, "key_type_idx")
                        .IsUnique();

                    b.ToTable("links", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Location", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("location", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChatId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp()");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Message1")
                        .HasColumnType("text")
                        .HasColumnName("Message");

                    b.Property<DateTime?>("ReceivedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "fK_user_message");

                    b.HasIndex(new[] { "CreatedAt" }, "idx_created_at");

                    b.HasIndex(new[] { "Type" }, "idx_msg_type");

                    b.HasIndex(new[] { "ReceivedAt" }, "idx_received_at");

                    b.HasIndex(new[] { "Status" }, "idx_status")
                        .HasDatabaseName("idx_status1");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.MgmtReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<DateOnly>("NextReview")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("next_review")
                        .HasDefaultValueSql("'0000-00-00'");

                    b.Property<int>("NextStep")
                        .HasColumnType("int(11)")
                        .HasColumnName("next_step");

                    b.Property<int>("Review")
                        .HasColumnType("int(11)")
                        .HasColumnName("review");

                    b.Property<int>("Reviewer")
                        .HasColumnType("int(11)")
                        .HasColumnName("reviewer");

                    b.Property<int>("RiskId")
                        .HasColumnType("int(11)")
                        .HasColumnName("risk_id");

                    b.Property<DateTime>("SubmissionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("submission_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "NextStep" }, "fk_next_step");

                    b.HasIndex(new[] { "Review" }, "fk_review_type");

                    b.HasIndex(new[] { "RiskId" }, "fk_risk");

                    b.HasIndex(new[] { "Reviewer" }, "fw_rev");

                    b.ToTable("mgmt_reviews", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.Mitigation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CurrentSolution")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("current_solution");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<int>("MitigationCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("mitigation_cost")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("MitigationEffort")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("mitigation_effort")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("MitigationOwner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("mitigation_owner")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("MitigationPercent")
                        .HasColumnType("int(11)")
                        .HasColumnName("mitigation_percent");

                    b.Property<DateOnly>("PlanningDate")
                        .HasColumnType("date")
                        .HasColumnName("planning_date");

                    b.Property<int>("PlanningStrategy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("planning_strategy")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("RiskId")
                        .HasColumnType("int(11)")
                        .HasColumnName("risk_id");

                    b.Property<string>("SecurityRecommendations")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("security_recommendations");

                    b.Property<string>("SecurityRequirements")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("security_requirements");

                    b.Property<DateTime>("SubmissionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("submission_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int>("SubmittedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("submitted_by")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MitigationCost" }, "fk_mitigation_cost");

                    b.HasIndex(new[] { "MitigationEffort" }, "fk_mitigation_effort");

                    b.HasIndex(new[] { "MitigationOwner" }, "fk_mitigation_owner");

                    b.HasIndex(new[] { "PlanningStrategy" }, "fk_planning_strategy");

                    b.HasIndex(new[] { "RiskId" }, "fk_risks");

                    b.HasIndex(new[] { "SubmittedBy" }, "fk_submitted_by");

                    b.ToTable("mitigations", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.MitigationAcceptUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("RiskId")
                        .HasColumnType("int(11)")
                        .HasColumnName("risk_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RiskId" }, "mau_risk_id_idx");

                    b.HasIndex(new[] { "RiskId", "UserId" }, "mau_risk_user_idx");

                    b.HasIndex(new[] { "UserId" }, "mau_user_idx");

                    b.ToTable("mitigation_accept_users", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.MitigationCost", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("mitigation_cost", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.MitigationEffort", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("mitigation_effort", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.MitigationToControl", b =>
                {
                    b.Property<int>("MitigationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("mitigation_id");

                    b.Property<int>("ControlId")
                        .HasColumnType("int(11)")
                        .HasColumnName("control_id");

                    b.Property<string>("ValidationDetails")
                        .HasColumnType("mediumtext")
                        .HasColumnName("validation_details");

                    b.Property<int?>("ValidationMitigationPercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("validation_mitigation_percent")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("ValidationOwner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("validation_owner")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("MitigationId", "ControlId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ControlId", "MitigationId" }, "control_id")
                        .HasDatabaseName("control_id1");

                    b.HasIndex(new[] { "ControlId" }, "mtg2ctrl_control_idx");

                    b.HasIndex(new[] { "MitigationId" }, "mtg2ctrl_mtg_idx");

                    b.ToTable("mitigation_to_controls", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.MitigationToTeam", b =>
                {
                    b.Property<int>("MitigationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("mitigation_id");

                    b.Property<int>("TeamId")
                        .HasColumnType("int(11)")
                        .HasColumnName("team_id");

                    b.HasKey("MitigationId", "TeamId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "MitigationId" }, "mtg2team_mtg_id");

                    b.HasIndex(new[] { "TeamId" }, "mtg2team_team_id");

                    b.HasIndex(new[] { "TeamId", "MitigationId" }, "team_id");

                    b.ToTable("mitigation_to_team", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.NextStep", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("next_step", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.NrAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "fx_action_user");

                    b.HasIndex(new[] { "ObjectType" }, "idx_object_type")
                        .HasAnnotation("MySql:FullTextIndex", true);

                    b.ToTable("nr_actions", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.NrFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("longblob")
                        .HasColumnName("content");

                    b.Property<int?>("MitigationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("mitigation_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("RiskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("risk_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Size")
                        .HasColumnType("int(11)")
                        .HasColumnName("size");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Type")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("type");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("unique_name")
                        .UseCollation("utf8mb4_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("UniqueName"), "utf8mb4");

                    b.Property<int>("User")
                        .HasColumnType("int(11)")
                        .HasColumnName("user");

                    b.Property<int?>("ViewType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("view_type")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MitigationId" }, "idx_mitigation_id");

                    b.HasIndex(new[] { "RiskId" }, "idx_risk_id");

                    b.ToTable("nr_files", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.PendingRisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AffectedAssets")
                        .HasColumnType("text")
                        .HasColumnName("affected_assets");

                    b.Property<int>("AssessmentAnswerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("assessment_answer_id");

                    b.Property<int>("AssessmentId")
                        .HasColumnType("int(11)")
                        .HasColumnName("assessment_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int?>("Owner")
                        .HasColumnType("int(11)")
                        .HasColumnName("owner");

                    b.Property<float>("Score")
                        .HasColumnType("float")
                        .HasColumnName("score");

                    b.Property<byte[]>("Subject")
                        .IsRequired()
                        .HasColumnType("blob")
                        .HasColumnName("subject");

                    b.Property<DateTime>("SubmissionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("submission_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("pending_risks", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Description")
                        .IsRequired()
                        .HasColumnType("blob")
                        .HasColumnName("description");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)")
                        .HasColumnName("order");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Key" }, "key")
                        .IsUnique();

                    b.ToTable("permissions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.PermissionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Description")
                        .IsRequired()
                        .HasColumnType("blob")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)")
                        .HasColumnName("order");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name")
                        .IsUnique()
                        .HasDatabaseName("name2");

                    b.ToTable("permission_groups", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.PermissionToPermissionGroup", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("permission_id");

                    b.Property<int>("PermissionGroupId")
                        .HasColumnType("int(11)")
                        .HasColumnName("permission_group_id");

                    b.HasKey("PermissionId", "PermissionGroupId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "PermissionGroupId", "PermissionId" }, "permission_group_id");

                    b.ToTable("permission_to_permission_group", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.PlanningStrategy", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("planning_strategy", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.QuestionnairePendingRisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Asset")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("asset");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("comment");

                    b.Property<int?>("Owner")
                        .HasColumnType("int(11)")
                        .HasColumnName("owner");

                    b.Property<int>("QuestionnaireScoringId")
                        .HasColumnType("int(11)")
                        .HasColumnName("questionnaire_scoring_id");

                    b.Property<int>("QuestionnaireTrackingId")
                        .HasColumnType("int(11)")
                        .HasColumnName("questionnaire_tracking_id");

                    b.Property<byte[]>("Subject")
                        .IsRequired()
                        .HasColumnType("blob")
                        .HasColumnName("subject");

                    b.Property<DateTime>("SubmissionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("submission_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("questionnaire_pending_risks", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.Regulation", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("regulation", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("creationDate")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int(11)")
                        .HasColumnName("creatorId");

                    b.Property<int?>("FileId")
                        .HasColumnType("int(11)")
                        .HasColumnName("fileId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Parameters")
                        .HasColumnType("text")
                        .HasColumnName("parameters");

                    b.Property<uint>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned zerofill")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'0000000000'");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("type")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CreatorId" }, "fk_creator_id");

                    b.HasIndex(new[] { "FileId" }, "fk_file_id");

                    b.HasIndex(new[] { "Name" }, "idx_name")
                        .HasDatabaseName("idx_name2");

                    b.ToTable("reports", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.ResidualRiskScoringHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("last_update");

                    b.Property<float>("ResidualRisk")
                        .HasColumnType("float")
                        .HasColumnName("residual_risk");

                    b.Property<int>("RiskId")
                        .HasColumnType("int(11)")
                        .HasColumnName("risk_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RiskId" }, "risk_id");

                    b.HasIndex(new[] { "LastUpdate" }, "rrsh_last_update_idx");

                    b.ToTable("residual_risk_scoring_history", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.Review", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("review", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.ReviewLevel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<int>("Value")
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    b.ToTable("review_levels", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.Risk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Assessment")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("assessment");

                    b.Property<int?>("Category")
                        .HasColumnType("int(11)")
                        .HasColumnName("category");

                    b.Property<int?>("CloseId")
                        .HasColumnType("int(11)")
                        .HasColumnName("close_id");

                    b.Property<string>("ControlNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("control_number");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<int>("Manager")
                        .HasColumnType("int(11)")
                        .HasColumnName("manager");

                    b.Property<int?>("MitigationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("mitigation_id");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("notes");

                    b.Property<int>("Owner")
                        .HasColumnType("int(11)")
                        .HasColumnName("owner");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int(11)")
                        .HasColumnName("project_id");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("reference_id")
                        .HasDefaultValueSql("''");

                    b.Property<int?>("Regulation")
                        .HasColumnType("int(11)")
                        .HasColumnName("regulation");

                    b.Property<string>("RiskCatalogMapping")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("risk_catalog_mapping");

                    b.Property<int?>("Source")
                        .HasColumnType("int(11)")
                        .HasColumnName("source");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("subject");

                    b.Property<DateTime>("SubmissionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("submission_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int>("SubmittedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("submitted_by")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("TemplateGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("template_group_id")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("ThreatCatalogMapping")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("threat_catalog_mapping");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Category" }, "category");

                    b.HasIndex(new[] { "CloseId" }, "close_id");

                    b.HasIndex(new[] { "MitigationId" }, "fk_risk_mitigation");

                    b.HasIndex(new[] { "Manager" }, "manager");

                    b.HasIndex(new[] { "Owner" }, "owner");

                    b.HasIndex(new[] { "ProjectId" }, "project_id");

                    b.HasIndex(new[] { "Regulation" }, "regulation");

                    b.HasIndex(new[] { "Source" }, "source");

                    b.HasIndex(new[] { "Status" }, "status");

                    b.HasIndex(new[] { "SubmittedBy" }, "submitted_by");

                    b.ToTable("risks", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.RiskCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Function")
                        .HasColumnType("int(11)")
                        .HasColumnName("function");

                    b.Property<int>("Grouping")
                        .HasColumnType("int(11)")
                        .HasColumnName("grouping");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("number");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)")
                        .HasColumnName("order");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("risk_catalog", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.RiskFunction", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("risk_function", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.RiskGrouping", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<bool>("Default")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)")
                        .HasColumnName("order");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("risk_grouping", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.RiskLevel", b =>
                {
                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("color");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("display_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<decimal>("Value")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)")
                        .HasColumnName("value");

                    b.HasIndex(new[] { "Name" }, "risk_levels_name_idx");

                    b.HasIndex(new[] { "Value" }, "risk_levels_value_idx");

                    b.ToTable("risk_levels", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.RiskScoring", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<float>("CalculatedRisk")
                        .HasColumnType("float")
                        .HasColumnName("calculated_risk");

                    b.Property<float>("ClassicImpact")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasColumnName("CLASSIC_impact")
                        .HasDefaultValueSql("'5'");

                    b.Property<float>("ClassicLikelihood")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasColumnName("CLASSIC_likelihood")
                        .HasDefaultValueSql("'5'");

                    b.Property<double?>("ContributingScore")
                        .HasColumnType("double")
                        .HasColumnName("contributing_score");

                    b.Property<float?>("Custom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'10'");

                    b.Property<int>("ScoringMethod")
                        .HasColumnType("int(11)")
                        .HasColumnName("scoring_method");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CalculatedRisk" }, "calculated_risk");

                    b.HasIndex(new[] { "Id" }, "id")
                        .IsUnique()
                        .HasDatabaseName("id1");

                    b.ToTable("risk_scoring", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.RiskScoringContributingImpact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContributingRiskId")
                        .HasColumnType("int(11)")
                        .HasColumnName("contributing_risk_id");

                    b.Property<int>("Impact")
                        .HasColumnType("int(11)")
                        .HasColumnName("impact");

                    b.Property<int>("RiskScoringId")
                        .HasColumnType("int(11)")
                        .HasColumnName("risk_scoring_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ContributingRiskId" }, "contributing_risk_id");

                    b.HasIndex(new[] { "RiskScoringId" }, "risk_scoring_id");

                    b.HasIndex(new[] { "Impact" }, "rsci_impact_idx");

                    b.HasIndex(new[] { "RiskScoringId", "ContributingRiskId" }, "rsci_index");

                    b.ToTable("risk_scoring_contributing_impacts", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.RiskScoringHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("CalculatedRisk")
                        .HasColumnType("float")
                        .HasColumnName("calculated_risk");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("last_update");

                    b.Property<int>("RiskId")
                        .HasColumnType("int(11)")
                        .HasColumnName("risk_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RiskId" }, "risk_id")
                        .HasDatabaseName("risk_id1");

                    b.HasIndex(new[] { "LastUpdate" }, "rsh_last_update_idx");

                    b.ToTable("risk_scoring_history", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.RiskToAdditionalStakeholder", b =>
                {
                    b.Property<int>("RiskId")
                        .HasColumnType("int(11)")
                        .HasColumnName("risk_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.HasKey("RiskId", "UserId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "UserId", "RiskId" }, "user_id");

                    b.ToTable("risk_to_additional_stakeholder", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.RiskToLocation", b =>
                {
                    b.Property<int>("RiskId")
                        .HasColumnType("int(11)")
                        .HasColumnName("risk_id");

                    b.Property<int>("LocationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("location_id");

                    b.HasKey("RiskId", "LocationId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "LocationId", "RiskId" }, "location_id");

                    b.ToTable("risk_to_location", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.RiskToTeam", b =>
                {
                    b.Property<int>("RiskId")
                        .HasColumnType("int(11)")
                        .HasColumnName("risk_id");

                    b.Property<int>("TeamId")
                        .HasColumnType("int(11)")
                        .HasColumnName("team_id");

                    b.HasKey("RiskId", "TeamId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "RiskId" }, "risk2team_risk_id");

                    b.HasIndex(new[] { "TeamId" }, "risk2team_team_id");

                    b.HasIndex(new[] { "TeamId", "RiskId" }, "team_id")
                        .HasDatabaseName("team_id1");

                    b.ToTable("risk_to_team", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.RiskToTechnology", b =>
                {
                    b.Property<int>("RiskId")
                        .HasColumnType("int(11)")
                        .HasColumnName("risk_id");

                    b.Property<int>("TechnologyId")
                        .HasColumnType("int(11)")
                        .HasColumnName("technology_id");

                    b.HasKey("RiskId", "TechnologyId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "TechnologyId", "RiskId" }, "technology_id");

                    b.ToTable("risk_to_technology", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.Role", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<bool>("Admin")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("admin");

                    b.Property<bool?>("Default")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Default" }, "default")
                        .IsUnique();

                    b.ToTable("role", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.ScoringMethod", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("scoring_methods", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.Setting", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Value")
                        .HasColumnType("mediumtext")
                        .HasColumnName("value");

                    b.HasKey("Name")
                        .HasName("PRIMARY");

                    b.ToTable("settings", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.Source", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("source", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.Status", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("status", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Tag1")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("tag");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Tag1" }, "tag_unique")
                        .IsUnique();

                    b.ToTable("tags", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.TagsTaggee", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tag_id");

                    b.Property<int>("TaggeeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("taggee_id");

                    b.Property<string>("Type")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("type");

                    b.HasIndex(new[] { "TagId", "TaggeeId", "Type" }, "tag_taggee_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "TaggeeId", "Type" }, "taggee_type");

                    b.ToTable("tags_taggees", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.Team", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("team", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.Technology", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("technology", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.TestResult", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<string>("BackgroundClass")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("background_class");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name_unique")
                        .IsUnique();

                    b.ToTable("test_results", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.TestStatus", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("test_status", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.ThreatCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Grouping")
                        .HasColumnType("int(11)")
                        .HasColumnName("grouping");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("number");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)")
                        .HasColumnName("order");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("threat_catalog", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.ThreatGrouping", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<bool>("Default")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)")
                        .HasColumnName("order");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.ToTable("threat_grouping", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("value");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Value"));

                    b.Property<bool>("Admin")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("admin");

                    b.Property<sbyte>("ChangePassword")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("change_password");

                    b.Property<byte[]>("Email")
                        .IsRequired()
                        .HasColumnType("blob")
                        .HasColumnName("email");

                    b.Property<bool?>("Enabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enabled")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Lang")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("lang");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime")
                        .HasColumnName("last_login");

                    b.Property<DateTime>("LastPasswordChangeDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("last_password_change_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<sbyte>("Lockout")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("lockout");

                    b.Property<int?>("Manager")
                        .HasColumnType("int(11)")
                        .HasColumnName("manager");

                    b.Property<int>("MultiFactor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("multi_factor")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("binary(60)")
                        .HasColumnName("password")
                        .IsFixedLength();

                    b.Property<int>("RoleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("role_id");

                    b.Property<string>("Salt")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("salt");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("type")
                        .HasDefaultValueSql("'local'");

                    b.Property<byte[]>("Username")
                        .IsRequired()
                        .HasColumnType("blob")
                        .HasColumnName("username");

                    b.HasKey("Value")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleId" }, "fk_role_user");

                    b.ToTable("user", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.UserPassHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("add_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("binary(60)")
                        .HasColumnName("password")
                        .IsFixedLength();

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("salt");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("user_pass_history", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.UserPassReuseHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Counts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("counts")
                        .HasDefaultValueSql("'1'");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("binary(60)")
                        .HasColumnName("password")
                        .IsFixedLength();

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("user_pass_reuse_history", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("DAL.Entities.Vulnerability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnalystId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<string>("Cves")
                        .HasColumnType("text");

                    b.Property<float?>("Cvss3BaseScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'0'");

                    b.Property<float?>("Cvss3ImpactScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'0'");

                    b.Property<float?>("Cvss3TemporalScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Cvss3TemporalVector")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Cvss3Vector")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<float?>("CvssBaseScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("CvssScoreSource")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<float?>("CvssTemporalScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("CvssTemporalVector")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CvssVector")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .HasColumnType("longtext");

                    b.Property<int>("DetectionCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int(11)");

                    b.Property<bool?>("ExploitAvaliable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ExploitCodeMaturity")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ExploitabilityEasy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("ExploitedByScanner")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FirstDetection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int?>("FixTeamId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("HostId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("HostServiceId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Iava")
                        .HasColumnType("text");

                    b.Property<string>("ImportHash")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImportSource")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("LastDetection")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp()");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime>("LastDetection"));

                    b.Property<string>("Msft")
                        .HasColumnType("text");

                    b.Property<string>("Mskb")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PatchPublicationDate")
                        .HasColumnType("datetime");

                    b.Property<double?>("Score")
                        .HasColumnType("double");

                    b.Property<string>("Severity")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Solution")
                        .HasColumnType("text");

                    b.Property<ushort>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Technology")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ThreatIntensity")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ThreatRecency")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ThreatSources")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<float?>("VprScore")
                        .HasColumnType("float");

                    b.Property<DateTime?>("VulnerabilityPublicationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Xref")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "HostServiceId" }, "fk_hosts_service");

                    b.HasIndex(new[] { "EntityId" }, "fk_vul_ent");

                    b.HasIndex(new[] { "HostId" }, "fk_vulnerability_host");

                    b.HasIndex(new[] { "FixTeamId" }, "fk_vulnerability_team");

                    b.HasIndex(new[] { "AnalystId" }, "fk_vulnerarbility_user");

                    b.HasIndex(new[] { "Status" }, "idx_status")
                        .HasDatabaseName("idx_status2");

                    b.HasIndex(new[] { "Technology" }, "idx_technology");

                    b.HasIndex(new[] { "Title" }, "idx_title")
                        .HasAnnotation("MySql:FullTextIndex", true);

                    b.ToTable("vulnerabilities", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("PermissionToUser", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("permission_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.HasKey("PermissionId", "UserId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "UserId", "PermissionId" }, "user_id")
                        .HasDatabaseName("user_id1");

                    b.ToTable("permission_to_user", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("RiskToEntity", b =>
                {
                    b.Property<int>("RiskId")
                        .HasColumnType("int(11)")
                        .HasColumnName("risk_id");

                    b.Property<int>("EntityId")
                        .HasColumnType("int(11)")
                        .HasColumnName("entity_id");

                    b.HasKey("RiskId", "EntityId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "EntityId" }, "fk_entity_id");

                    b.ToTable("risk_to_entity", (string)null);
                });

            modelBuilder.Entity("RisksToCatalog", b =>
                {
                    b.Property<int>("RiskId")
                        .HasColumnType("int(11)");

                    b.Property<int>("RiskCatalogId")
                        .HasColumnType("int(11)");

                    b.HasKey("RiskId", "RiskCatalogId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex("RiskCatalogId");

                    b.ToTable("RisksToCatalog");
                });

            modelBuilder.Entity("RisksToVulnerability", b =>
                {
                    b.Property<int>("RiskId")
                        .HasColumnType("int(11)")
                        .HasColumnName("risk_id");

                    b.Property<int>("VulnerabilityId")
                        .HasColumnType("int(11)")
                        .HasColumnName("vulnerability_id");

                    b.HasKey("RiskId", "VulnerabilityId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "VulnerabilityId" }, "fk_rv_v");

                    b.ToTable("risks_to_vulnerabilities", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("RoleResponsibility", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("role_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "PermissionId", "RoleId" }, "permission_id");

                    b.ToTable("role_responsibilities", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("UserToTeam", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.Property<int>("TeamId")
                        .HasColumnType("int(11)")
                        .HasColumnName("team_id");

                    b.HasKey("UserId", "TeamId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "TeamId", "UserId" }, "team_id")
                        .HasDatabaseName("team_id2");

                    b.ToTable("user_to_team", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("VulnerabilitiesToAction", b =>
                {
                    b.Property<int>("VulnerabilityId")
                        .HasColumnType("int(11)")
                        .HasColumnName("vulnerabilityId");

                    b.Property<int>("ActionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("actionId");

                    b.HasKey("VulnerabilityId", "ActionId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ActionId" }, "fk_vul_act2");

                    b.ToTable("vulnerabilities_to_actions", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.AssessmentAnswer", b =>
                {
                    b.HasOne("DAL.Entities.Assessment", "Assessment")
                        .WithMany("AssessmentAnswers")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assessment_answer");

                    b.HasOne("DAL.Entities.AssessmentQuestion", "Question")
                        .WithMany("AssessmentAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_answer");

                    b.Navigation("Assessment");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DAL.Entities.AssessmentQuestion", b =>
                {
                    b.HasOne("DAL.Entities.Assessment", "Assessment")
                        .WithMany("AssessmentQuestions")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assessment_question");

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("DAL.Entities.AssessmentRun", b =>
                {
                    b.HasOne("DAL.Entities.User", "Analyst")
                        .WithMany("AssessmentRuns")
                        .HasForeignKey("AnalystId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fkAnalystId");

                    b.HasOne("DAL.Entities.Assessment", "Assessment")
                        .WithMany("AssessmentRuns")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fkAssessment");

                    b.HasOne("DAL.Entities.Entity", "Entity")
                        .WithMany("AssessmentRuns")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fkEntity");

                    b.HasOne("DAL.Entities.Host", "Host")
                        .WithMany("AssessmentRuns")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fkHost");

                    b.Navigation("Analyst");

                    b.Navigation("Assessment");

                    b.Navigation("Entity");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("DAL.Entities.AssessmentRunsAnswer", b =>
                {
                    b.HasOne("DAL.Entities.AssessmentAnswer", "Answer")
                        .WithMany("AssessmentRunsAnswers")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fkAnswerId");

                    b.HasOne("DAL.Entities.AssessmentQuestion", "Question")
                        .WithMany("AssessmentRunsAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fkQuestionId");

                    b.HasOne("DAL.Entities.AssessmentRun", "Run")
                        .WithMany("AssessmentRunsAnswers")
                        .HasForeignKey("RunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fkRunId");

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("Run");
                });

            modelBuilder.Entity("DAL.Entities.Comment", b =>
                {
                    b.HasOne("DAL.Entities.FixRequest", "FixRequest")
                        .WithMany("Comments")
                        .HasForeignKey("FixRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_fix_request_comments");

                    b.HasOne("DAL.Entities.Host", "Host")
                        .WithMany("Comments")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_host_id_comments");

                    b.HasOne("DAL.Entities.Risk", "Risk")
                        .WithMany("Comments")
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_risk_id_comments");

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_user_id_comments");

                    b.HasOne("DAL.Entities.Vulnerability", "Vulnerability")
                        .WithMany("CommentsNavigation")
                        .HasForeignKey("VulnerabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_vulnerability_id_comments");

                    b.Navigation("FixRequest");

                    b.Navigation("Host");

                    b.Navigation("Risk");

                    b.Navigation("User");

                    b.Navigation("Vulnerability");
                });

            modelBuilder.Entity("DAL.Entities.EntitiesProperty", b =>
                {
                    b.HasOne("DAL.Entities.Entity", "EntityNavigation")
                        .WithMany("EntitiesProperties")
                        .HasForeignKey("Entity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_entity");

                    b.Navigation("EntityNavigation");
                });

            modelBuilder.Entity("DAL.Entities.Entity", b =>
                {
                    b.HasOne("DAL.Entities.Entity", "ParentNavigation")
                        .WithMany("InverseParentNavigation")
                        .HasForeignKey("Parent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_parent");

                    b.Navigation("ParentNavigation");
                });

            modelBuilder.Entity("DAL.Entities.FixRequest", b =>
                {
                    b.HasOne("DAL.Entities.Team", "FixTeam")
                        .WithMany("FixRequests")
                        .HasForeignKey("FixTeamId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_fixteam");

                    b.HasOne("DAL.Entities.User", "LastReportingUser")
                        .WithMany("FixRequestLastReportingUsers")
                        .HasForeignKey("LastReportingUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_lastReportingUser");

                    b.HasOne("DAL.Entities.User", "RequestingUser")
                        .WithMany("FixRequestRequestingUsers")
                        .HasForeignKey("RequestingUserId")
                        .HasConstraintName("fk_requesting_user_id");

                    b.HasOne("DAL.Entities.Vulnerability", "Vulnerability")
                        .WithMany("FixRequests")
                        .HasForeignKey("VulnerabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vulnerability");

                    b.Navigation("FixTeam");

                    b.Navigation("LastReportingUser");

                    b.Navigation("RequestingUser");

                    b.Navigation("Vulnerability");
                });

            modelBuilder.Entity("DAL.Entities.Host", b =>
                {
                    b.HasOne("DAL.Entities.Team", "Team")
                        .WithMany("Hosts")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_host_team");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DAL.Entities.HostsService", b =>
                {
                    b.HasOne("DAL.Entities.Host", "Host")
                        .WithMany("HostsServices")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_host");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("DAL.Entities.Job", b =>
                {
                    b.HasOne("DAL.Entities.User", "Owner")
                        .WithMany("Jobs")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_user_job");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DAL.Entities.Message", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_user_message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.MgmtReview", b =>
                {
                    b.HasOne("DAL.Entities.NextStep", "NextStepNavigation")
                        .WithMany("MgmtReviews")
                        .HasForeignKey("NextStep")
                        .IsRequired()
                        .HasConstraintName("fk_next_step");

                    b.HasOne("DAL.Entities.Review", "ReviewNavigation")
                        .WithMany("MgmtReviews")
                        .HasForeignKey("Review")
                        .IsRequired()
                        .HasConstraintName("fk_review_type");

                    b.HasOne("DAL.Entities.User", "ReviewerNavigation")
                        .WithMany("MgmtReviews")
                        .HasForeignKey("Reviewer")
                        .IsRequired()
                        .HasConstraintName("fw_rev");

                    b.HasOne("DAL.Entities.Risk", "Risk")
                        .WithMany("MgmtReviews")
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_risk");

                    b.Navigation("NextStepNavigation");

                    b.Navigation("ReviewNavigation");

                    b.Navigation("ReviewerNavigation");

                    b.Navigation("Risk");
                });

            modelBuilder.Entity("DAL.Entities.Mitigation", b =>
                {
                    b.HasOne("DAL.Entities.MitigationCost", "MitigationCostNavigation")
                        .WithMany("Mitigations")
                        .HasForeignKey("MitigationCost")
                        .IsRequired()
                        .HasConstraintName("fk_mitigation_cost");

                    b.HasOne("DAL.Entities.MitigationEffort", "MitigationEffortNavigation")
                        .WithMany("Mitigations")
                        .HasForeignKey("MitigationEffort")
                        .IsRequired()
                        .HasConstraintName("fk_mitigation_effort");

                    b.HasOne("DAL.Entities.User", "MitigationOwnerNavigation")
                        .WithMany("MitigationMitigationOwnerNavigations")
                        .HasForeignKey("MitigationOwner")
                        .IsRequired()
                        .HasConstraintName("fk_mitigation_owner");

                    b.HasOne("DAL.Entities.PlanningStrategy", "PlanningStrategyNavigation")
                        .WithMany("Mitigations")
                        .HasForeignKey("PlanningStrategy")
                        .IsRequired()
                        .HasConstraintName("fk_planning_strategy");

                    b.HasOne("DAL.Entities.Risk", "Risk")
                        .WithMany("Mitigations")
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_risks");

                    b.HasOne("DAL.Entities.User", "SubmittedByNavigation")
                        .WithMany("MitigationSubmittedByNavigations")
                        .HasForeignKey("SubmittedBy")
                        .IsRequired()
                        .HasConstraintName("fk_submitted_by");

                    b.Navigation("MitigationCostNavigation");

                    b.Navigation("MitigationEffortNavigation");

                    b.Navigation("MitigationOwnerNavigation");

                    b.Navigation("PlanningStrategyNavigation");

                    b.Navigation("Risk");

                    b.Navigation("SubmittedByNavigation");
                });

            modelBuilder.Entity("DAL.Entities.NrAction", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("NrActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fx_action_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Report", b =>
                {
                    b.HasOne("DAL.Entities.User", "Creator")
                        .WithMany("Reports")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("fk_creator_id");

                    b.HasOne("DAL.Entities.NrFile", "File")
                        .WithMany("Reports")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_file_id");

                    b.Navigation("Creator");

                    b.Navigation("File");
                });

            modelBuilder.Entity("DAL.Entities.Risk", b =>
                {
                    b.HasOne("DAL.Entities.Category", "CategoryNavigation")
                        .WithMany("Risks")
                        .HasForeignKey("Category")
                        .HasConstraintName("fk_risk_category");

                    b.HasOne("DAL.Entities.Mitigation", "Mitigation")
                        .WithMany("Risks")
                        .HasForeignKey("MitigationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_risk_mitigation");

                    b.HasOne("DAL.Entities.Source", "SourceNavigation")
                        .WithMany("Risks")
                        .HasForeignKey("Source")
                        .HasConstraintName("fk_risk_source");

                    b.Navigation("CategoryNavigation");

                    b.Navigation("Mitigation");

                    b.Navigation("SourceNavigation");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("fk_role_user");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DAL.Entities.Vulnerability", b =>
                {
                    b.HasOne("DAL.Entities.User", "Analyst")
                        .WithMany("Vulnerabilities")
                        .HasForeignKey("AnalystId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_vulnerarbility_user");

                    b.HasOne("DAL.Entities.Entity", "Entity")
                        .WithMany("Vulnerabilities")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_vul_ent");

                    b.HasOne("DAL.Entities.Team", "FixTeam")
                        .WithMany("Vulnerabilities")
                        .HasForeignKey("FixTeamId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_vulnerability_team");

                    b.HasOne("DAL.Entities.Host", "Host")
                        .WithMany("Vulnerabilities")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_vulnerability_host");

                    b.HasOne("DAL.Entities.HostsService", "HostService")
                        .WithMany("Vulnerabilities")
                        .HasForeignKey("HostServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_hosts_service");

                    b.Navigation("Analyst");

                    b.Navigation("Entity");

                    b.Navigation("FixTeam");

                    b.Navigation("Host");

                    b.Navigation("HostService");
                });

            modelBuilder.Entity("PermissionToUser", b =>
                {
                    b.HasOne("DAL.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_perm_user");

                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_perm");
                });

            modelBuilder.Entity("RiskToEntity", b =>
                {
                    b.HasOne("DAL.Entities.Entity", null)
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_entity_id");

                    b.HasOne("DAL.Entities.Risk", null)
                        .WithMany()
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_risk_id");
                });

            modelBuilder.Entity("RisksToCatalog", b =>
                {
                    b.HasOne("DAL.Entities.RiskCatalog", null)
                        .WithMany()
                        .HasForeignKey("RiskCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_risk_rcatalog");

                    b.HasOne("DAL.Entities.Risk", null)
                        .WithMany()
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_riskcatlog_risk_2");
                });

            modelBuilder.Entity("RisksToVulnerability", b =>
                {
                    b.HasOne("DAL.Entities.Risk", null)
                        .WithMany()
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rv_r");

                    b.HasOne("DAL.Entities.Vulnerability", null)
                        .WithMany()
                        .HasForeignKey("VulnerabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rv_v");
                });

            modelBuilder.Entity("RoleResponsibility", b =>
                {
                    b.HasOne("DAL.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_perm_id");

                    b.HasOne("DAL.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_p_id");
                });

            modelBuilder.Entity("UserToTeam", b =>
                {
                    b.HasOne("DAL.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ut_team");

                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ut_user");
                });

            modelBuilder.Entity("VulnerabilitiesToAction", b =>
                {
                    b.HasOne("DAL.Entities.NrAction", null)
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vul_act2");

                    b.HasOne("DAL.Entities.Vulnerability", null)
                        .WithMany()
                        .HasForeignKey("VulnerabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vul_act_1");
                });

            modelBuilder.Entity("DAL.Entities.Assessment", b =>
                {
                    b.Navigation("AssessmentAnswers");

                    b.Navigation("AssessmentQuestions");

                    b.Navigation("AssessmentRuns");
                });

            modelBuilder.Entity("DAL.Entities.AssessmentAnswer", b =>
                {
                    b.Navigation("AssessmentRunsAnswers");
                });

            modelBuilder.Entity("DAL.Entities.AssessmentQuestion", b =>
                {
                    b.Navigation("AssessmentAnswers");

                    b.Navigation("AssessmentRunsAnswers");
                });

            modelBuilder.Entity("DAL.Entities.AssessmentRun", b =>
                {
                    b.Navigation("AssessmentRunsAnswers");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Navigation("Risks");
                });

            modelBuilder.Entity("DAL.Entities.Entity", b =>
                {
                    b.Navigation("AssessmentRuns");

                    b.Navigation("EntitiesProperties");

                    b.Navigation("InverseParentNavigation");

                    b.Navigation("Vulnerabilities");
                });

            modelBuilder.Entity("DAL.Entities.FixRequest", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("DAL.Entities.Host", b =>
                {
                    b.Navigation("AssessmentRuns");

                    b.Navigation("Comments");

                    b.Navigation("HostsServices");

                    b.Navigation("Vulnerabilities");
                });

            modelBuilder.Entity("DAL.Entities.HostsService", b =>
                {
                    b.Navigation("Vulnerabilities");
                });

            modelBuilder.Entity("DAL.Entities.Mitigation", b =>
                {
                    b.Navigation("Risks");
                });

            modelBuilder.Entity("DAL.Entities.MitigationCost", b =>
                {
                    b.Navigation("Mitigations");
                });

            modelBuilder.Entity("DAL.Entities.MitigationEffort", b =>
                {
                    b.Navigation("Mitigations");
                });

            modelBuilder.Entity("DAL.Entities.NextStep", b =>
                {
                    b.Navigation("MgmtReviews");
                });

            modelBuilder.Entity("DAL.Entities.NrFile", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("DAL.Entities.PlanningStrategy", b =>
                {
                    b.Navigation("Mitigations");
                });

            modelBuilder.Entity("DAL.Entities.Review", b =>
                {
                    b.Navigation("MgmtReviews");
                });

            modelBuilder.Entity("DAL.Entities.Risk", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("MgmtReviews");

                    b.Navigation("Mitigations");
                });

            modelBuilder.Entity("DAL.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Source", b =>
                {
                    b.Navigation("Risks");
                });

            modelBuilder.Entity("DAL.Entities.Team", b =>
                {
                    b.Navigation("FixRequests");

                    b.Navigation("Hosts");

                    b.Navigation("Vulnerabilities");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("AssessmentRuns");

                    b.Navigation("Comments");

                    b.Navigation("FixRequestLastReportingUsers");

                    b.Navigation("FixRequestRequestingUsers");

                    b.Navigation("Jobs");

                    b.Navigation("Messages");

                    b.Navigation("MgmtReviews");

                    b.Navigation("MitigationMitigationOwnerNavigations");

                    b.Navigation("MitigationSubmittedByNavigations");

                    b.Navigation("NrActions");

                    b.Navigation("Reports");

                    b.Navigation("Vulnerabilities");
                });

            modelBuilder.Entity("DAL.Entities.Vulnerability", b =>
                {
                    b.Navigation("CommentsNavigation");

                    b.Navigation("FixRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
